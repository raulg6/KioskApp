@page "/kiosk"
@inject NavigationManager NavigationManager
@using System.Collections.Generic

<PageTitle>Kiosk</PageTitle>

<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <a class="navbar-brand" href="#">Kiosk</a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav">
            <li class="nav-item">
                <button class="nav-link btn btn-link" @onclick='() => FilterCategory("Getränke")'>Getränke</button>
            </li>
            <li class="nav-item">
                <button class="nav-link btn btn-link" @onclick='() => FilterCategory("Softdrinks")'>Softdrinks</button>
            </li>
            <li class="nav-item">
                <button class="nav-link btn btn-link" @onclick='() => FilterCategory("Vorspeisen")'>Vorspeisen</button>
            </li>
            <li class="nav-item">
                <button class="nav-link btn btn-link" @onclick='() => FilterCategory("Hauptspeisen")'>Hauptspeisen</button>
            </li>
            <li class="nav-item">
                <button class="nav-link btn btn-link" @onclick='() => FilterCategory("Desserts")'>Desserts</button>
            </li>
            <li class="nav-item">
                <button class="nav-link btn btn-link text-danger" @onclick='ResetFilter'>Reset</button>
            </li>
        </ul>
    </div>
</nav>

<div class="container-fluid">
    <div class="row">
        <div class="col-12 col-md-8">
            <h3>Kiosk</h3>

            @if (FilteredProducts == null || !FilteredProducts.Any())
            {
                <p>No categories found.</p>
            }
            else
            {
                <div class="row">
                    @foreach (var product in FilteredProducts)
                    {
                        <div class="col-12 col-sm-6 col-md-4 col-lg-3 mb-3">
                            <div class="card" style="cursor: pointer;" @onclick="() => AddToCart(product)">
                                <img src="@product.ImageUrl" class="card-img-top img-fixed" alt="@product.Name">
                                <div class="card-body">
                                    <h5 class="card-title">@product.Name</h5>
                                    <p class="price">@product.Preis.ToString("0.00")CHF</p>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
        <div class="col-12 col-md-4">
            <h3>Rechnung</h3>
            @if (cart.Any())
            {
                <ul class="list-group">
                    @foreach (var item in cart)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <span>
                                @item.Product.Name
                                <br />
                                @item.Quantity x @item.Product.Preis.ToString("0.00")CHF = @(item.Quantity * item.Product.Preis)CHF
                            </span>
                            <span>
                                <button class="btn btn-danger btn-sm" @onclick="() => RemoveOneFromCart(item)">
                                    <i class="oi oi-minus"></i>
                                </button>
                                <button class="btn btn-danger btn-sm" @onclick="() => RemoveFromCart(item)">
                                    <i class="oi oi-trash"></i>
                                </button>
                            </span>
                        </li>
                    }
                </ul>
                <div class="mt-3">
                    <h5>Total: @cart.Sum(item => item.Quantity * item.Product.Preis).ToString("0.00") CHF</h5>
                </div>
            }
            else
            {
                <p>Rechnung ist leer.</p>
            }
        </div>
    </div>
</div>

@code {
    private List<Product> Products = new();
    private List<Product> FilteredProducts = new();
    private List<CartItem> cart = new();

    protected override async Task OnInitializedAsync()
    {
        Products = new List<Product>
        {
            new Product { Name = "Cola", Preis = 4.00, Description = "Erfrischendes Getränk", Category = "Softdrinks", ImageUrl = "Images/coca_cola_images.jpg" },
            new Product { Name = "Wasser", Preis = 2.00, Description = "Natürliches Wasser", Category = "Getränke", ImageUrl = "Images/water_images.jpg" },
            new Product { Name = "Salat", Preis = 14.00, Description = "Frischer Salat", Category = "Vorspeisen", ImageUrl = "Images/salad_images.jpg" },
            new Product { Name = "Lasagne", Preis = 30.00, Description = "Originelle Italienische Lasagne", Category = "Hauptspeisen", ImageUrl = "Images/lasagna_images.png" },
            new Product { Name = "Tiramisu", Preis = 13.00, Description = "Leckeres Dessert", Category = "Desserts", ImageUrl = "Images/tiramisu_images.jpg" },
        };
        FilteredProducts = Products;
    }

    private void FilterCategory(string category)
    {
        FilteredProducts = Products.Where(p => p.Category == category).ToList();
    }

    private void ResetFilter()
    {
        FilteredProducts = Products;
    }

    private void AddToCart(Product product)
    {
        var cartItem = cart.FirstOrDefault(item => item.Product.Name == product.Name);
        if (cartItem != null)
        {
            cartItem.Quantity++;
        }
        else
        {
            cart.Add(new CartItem { Product = product, Quantity = 1 });
        }
    }

    private void RemoveOneFromCart(CartItem item)
    {
        if (item.Quantity > 1)
        {
            item.Quantity--;
        }
        else
        {
            cart.Remove(item);
        }
    }

    private void RemoveFromCart(CartItem item)
    {
        cart.Remove(item);
    }

    private class Product
    {
        public string Name { get; set; }
        public double Preis { get; set; }
        public string Description { get; set; }
        public string Category { get; set; }
        public string ImageUrl { get; set; }
    }

    private class CartItem
    {
        public Product Product { get; set; }
        public int Quantity { get; set; }
    }
}

<style>
    .card {
        border-radius: 5px;
        box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.4);
        margin-bottom: 20px;
        transition: transform 0.2s ease;
    }

    .card-img-top {
        width: 100%;
        height: 150px;
        object-fit: cover;
    }

    .card:hover {
        transform: scale(1.05);
    }

    .img-fixed {
        height: 150px;
        object-fit: cover;
    }

    .list-group-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .price {
        font-weight: bold;
    }

    .btn-sm {
        margin-left: 5px;
    }
</style>